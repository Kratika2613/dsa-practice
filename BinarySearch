int search(vector<int> &nums, int target) {
    int low = 0, high = nums.size() - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return -1;
}
=========================================================================================================================================================================================================
int lowerBound(const vector<int>& arr, int n, int x) {
    int low = 0, high = n - 1;
    int ans = n; // Initialize ans outside the loop

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] >= x) {
            ans = mid; // Update ans when the element is found
            high = mid - 1;
            
        } else {
             low = mid + 1;
        }
    }
    return ans;
}

============================================================================================================================================================================================================
int upperBound(vector<int> &arr, int x, int n) {
    int low = 0, high = n - 1;
    int ans = n; // Initialize ans outside the loop

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] > x) {
            ans = mid; // Update ans when the element is found
            high = mid - 1;
        } else {
            // Corrected: Update low in this block
            low = mid + 1;
        }
    }
    return ans;
}
====================================================================================================================================================================================================================
#include <vector>
using namespace std;

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    int low = 0, high = n - 1;
    int firstOccurrence = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == k) {
            firstOccurrence = mid;
            high = mid - 1;
        } else if (arr[mid] < k) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    int lastOccurrence = -1;
    low = 0;
    high = n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == k) {
            lastOccurrence = mid;
            low = mid + 1;
        } else if (arr[mid] < k) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return make_pair(firstOccurrence, lastOccurrence);
}

=======================================================================================================================================================================================================
#include <bits/stdc++.h>
using namespace std;

int findMin(vector<int>& arr)
{
    int low = 0, high = arr.size() - 1;
    int ans = INT_MAX;

    while (low <= high) {
        int mid = (low + high) / 2;

        // Check if the array is already sorted
        if (arr[low] <= arr[high]) {
            ans = min(ans, arr[low]);
            break;
        }

        // Check which half is sorted and update the answer accordingly
        if (arr[mid] >= arr[low]) {
            ans = min(ans, arr[low]);
            low = mid + 1;
        } else {
            ans = min(ans, arr[mid]);
            high = mid - 1;
        }
    }

    return ans;
}

===========================================================================================================================================================================================================
#include<bits/stdc++.h>
using namespace std;

int findKRotation(vector<int> &arr) {
    int low = 0, high = arr.size() - 1;
    int ans = INT_MAX;
    int index = -1;

    while (low <= high) {
        int mid = (low + high) / 2;

        // Check if the array is already sorted
        if (arr[low] <= arr[high]) {
            if (arr[low] < ans) {
                index = low;
                ans = arr[low];
            }
            break;
        }

        // Check which half is sorted and update the answer accordingly
        if (arr[mid] >= arr[low]) {
            if (arr[low] < ans) {
                index = low;
                ans = arr[low];
            }
            low = mid + 1;
        } else {
            if (arr[mid] < ans) {
                index = mid;
                ans = arr[mid];
            }
            high = mid - 1;
        }
    }

    return index;
}

=========================================================================================================================================================================================================================
int singleNonDuplicate(vector<int>& arr)
{
	int n = arr.size();
	if(n==1){
		return arr[0];
	}
	if(arr[0]!=arr[1]){
		return arr[0];
	}
	if(arr[n-1]!=arr[n-2]){
		return arr[n-1];
	}
	int low=1 , high =n-2;
	while(low<=high){
		int mid =(low+high)/2;
		if(arr[mid]!=arr[mid+1] && arr[mid]!=arr[mid-1]){
			return arr[mid];
		}
		if((mid%2==1 && arr[mid]==arr[mid-1])||(mid%2==0 && arr[mid]==arr[mid+1])){
			low = mid+1;
		}
		else{
			high = mid-1;
		}
	}
	return -1;
}
========================================================================================================================================================================================================================
#include <vector>

int findPeakElement(std::vector<int> &arr) {
    int n = arr.size();
    
    // Handle edge cases for small arrays
    if (n == 1) {
        return 0;
    }

    // Check if the first element is a peak
    if (arr[0] > arr[1]) {
        return 0;
    }
    
    // Check if the last element is a peak
    if (arr[n - 1] > arr[n - 2]) {
        return n - 1;
    }

    int low = 1, high = n - 2;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        // Check if mid is a peak
        if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) {
            return mid;
        }
        // Move towards the higher side
        else if (arr[mid] < arr[mid + 1]) {
            low = mid + 1;
        }
        // Move towards the lower side
        else {
            high = mid - 1;
        }
    }

    return -1; // No peak found
}

